{"mappings":";;;;;ACIA,SAAS,6BAAO,MAAqB;IACnC,OAAO,eAAe;AACxB;AAEO,MAAM,kDAAe,CAAA,GAAA,aAAS;IACnC,YAAY,MAAqB,CAAE;QACjC,KAAK,CAAC;YACJ,mBAAkB,MAAW,EAAE,WAAmB;gBAChD,OAAO,CAAC,CAAC,EAAE,cAAc,EAAE,CAAC;YAC9B;YAEA,kBAAiB,UAAkB;gBACjC,iHAAiH;gBACjH,6EAA6E;gBAC7E,OAAO,MAAM,WAAW,OAAO,CAAC,MAAM,QAAQ;YAChD;YAEA,+EAA+E;YAC/E,mEAAmE;YACnE,iEAAiE;YACjE,gBAAgB,CAAC,QAAU;YAE3B,OAAO,OAAO,KAAa;gBACzB,MAAM,MAAM,MAAM,OAAO,KAAK,CAAC,KAAK;gBACpC,OAAO;oBAAC,IAAI,IAAI;oBAAE;iBAAI;YACxB;YAEA,QAAQ,SAAU,GAAW,EAAE,MAAa;gBAC1C,IAAI;gBACJ,IAAI;gBACJ,MAAM,QAAe,EAAE;gBAEvB,OAAO;oBACL,CAAC,OAAO,aAAa,CAAC,EAAE,IAAO,CAAA;4BAC7B,MAAM;gCACJ,IAAI,CAAC,SAAS;oCACZ,UAAU,6BAAO,UAAU,MAAM,OAAO,OAAO,KAAK;oCACpD,SAAS,QAAQ,KAAK,CAAC,IAAI,CAAA,GAAA,eAAK,EAAE,KAAK;gCACzC;gCAEA,IAAI,MAAM,MAAM,GAAG,GACjB,OAAO;oCAAE,MAAM;oCAAO,OAAO,MAAM,KAAK;gCAAG;gCAG7C,IAAI;oCACF,MAAM,MAAM,MAAM,OAAO,IAAI,CAAC;oCAC9B,IAAI,IAAI,MAAM,KAAK,GAAG;wCACpB,MAAM,OAAO,KAAK;wCAClB,IAAI,6BAAO,SAAS,AAAC,QAAuB,OAAO;wCACnD,OAAO;4CAAE,MAAM;4CAAM,OAAO;wCAAU;oCACxC;oCAEA,MAAM,IAAI,IAAI;oCACd,OAAO;wCAAE,MAAM;wCAAO,OAAO,MAAM,KAAK;oCAAG;gCAC7C,EAAE,OAAM,KAAU;oCAChB,MAAM,OAAO,KAAK;oCAClB,IAAI,6BAAO,SAAS,AAAC,QAAuB,OAAO;oCACnD,MAAM;gCACR;4BACF;wBACF,CAAA;gBACF;YACF;QACF;IACF;AACF","sources":["drivers/postgres/index.ts","drivers/postgres/postgres.ts"],"sourcesContent":["export { SqlTag } from './postgres';\n","import { SqlTag as CoreSqlTag } from '@sqltags/core';\nimport { type Client, type Pool, type PoolClient, type QueryResult } from 'pg';\nimport Cursor from 'pg-cursor';\n\nfunction isPool(client: Client | Pool): client is Pool {\n  return 'idleCount' in client;\n}\n\nexport class SqlTag extends CoreSqlTag<QueryResult> {\n  constructor(client: Client | Pool) {\n    super({\n      parameterizeValue(_value: any, _paramIndex: number) {\n        return `$${_paramIndex + 1}`;\n      },\n\n      escapeIdentifier(identifier: string) {\n        // Not using the one from 'pg' library because it requires a connection instance which doesn't work with the pool\n        // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n        return '\"' + identifier.replace(/\"/g, '\"\"') + '\"';\n      },\n\n      // Note that values are not serialized using the default sqltags serialization.\n      // Instead, they are passed as-is and serialized according to this:\n      // https://node-postgres.com/features/queries#parameterized-query\n      serializeValue: (value) => value,\n\n      query: async (sql: string, params: any[]): Promise<[any[], QueryResult]> => {\n        const res = await client.query(sql, params);\n        return [res.rows, res];\n      },\n\n      cursor: function (sql: string, params: any[]): AsyncIterable<any> {\n        let _client: Client | PoolClient;\n        let cursor: Cursor<any>;\n        const queue: any[] = [];\n\n        return {\n          [Symbol.asyncIterator]: () => ({\n            next: async () => {\n              if (!_client) {\n                _client = isPool(client) ? await client.connect() : client;\n                cursor = _client.query(new Cursor(sql, params));\n              }\n\n              if (queue.length > 0) {\n                return { done: false, value: queue.shift() };\n              }\n\n              try {\n                const res = await cursor.read(100);\n                if (res.length === 0) {\n                  await cursor.close();\n                  if (isPool(client)) (_client as PoolClient).release();\n                  return { done: true, value: undefined };\n                }\n\n                queue.push(...res);\n                return { done: false, value: queue.shift() };\n              } catch(err: any) {\n                await cursor.close();\n                if (isPool(client)) (_client as PoolClient).release();\n                throw err;\n              }\n            },\n          }),\n        };\n      },\n    });\n  }\n}\n"],"names":[],"version":3,"file":"index.mjs.map","sourceRoot":"../../../"}