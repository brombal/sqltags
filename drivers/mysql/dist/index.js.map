{"mappings":";;;;;;;;;AAIO,SAAS,yCACd,UAAuC;IAEvC,OAAO;QACL,mBAAkB,MAAW,EAAE,WAAmB;YAChD,OAAO;QACT;QAEA,kBAAiB,UAAkB;YACjC,OAAO,CAAC,EAAE,EAAE,WAAW,OAAO,CAAC,MAAM,MAAM,EAAE,CAAC;QAChD;QAEA,OAAO,OAAO,KAAa;YACzB,OAAO,IAAI,QAAQ,CAAC,SAAS;gBAC3B,WAAW,KAAK,CAAC,KAAK,QAAQ,CAAC,KAAK,QAAQ;oBAC1C,IAAI,KACF,OAAO;yBAEP,QAAQ;wBAAC;wBAAiB;qBAAO;gBAErC;YACF;QACF;QAEA,QAAQ,gBAAiB,IAAY,EAAE,OAAc;YACnD,MAAM,SAAS,WAAW,KAAK,CAAC,MAAM;YAEtC,MAAM,IAAI,IAAI,CAAA,GAAA,+BAAa,EAAE;gBAC3B,OAAM,UAAU;oBACd,IAAI,QAAQ;oBACZ,OAAO,EAAE,CAAC,UAAU,CAAC;wBACnB,WAAW,OAAO,CAAC;oBACrB;oBACA,OAAO,EAAE,CAAC,OAAO;wBACf,IAAI,CAAC,OAAO,WAAW,KAAK;oBAC9B;oBACA,OAAO,EAAE,CAAC,SAAS,CAAC;wBAClB,QAAQ;wBACR,WAAW,KAAK,CAAC;oBACnB;gBACF;YACF;YAEA,WAAW,MAAM,OAAO,EACtB,MAAM;QAEV;IACF;AACF","sources":["drivers/mysql/mysql.ts"],"sourcesContent":["import { ReadableStream } from 'stream/web';\nimport { type Connection, type FieldPacket, type PoolConnection } from 'mysql2';\nimport { type SqlTemplateDriver } from '@sqltags/core';\n\nexport function mysqlDriver(\n  connection: Connection | PoolConnection,\n): SqlTemplateDriver<FieldPacket[]> {\n  return {\n    parameterizeValue(_value: any, _paramIndex: number) {\n      return '?';\n    },\n\n    escapeIdentifier(identifier: string) {\n      return `\\`${identifier.replace(/`/g, '``')}\\``;\n    },\n\n    query: async (sql: string, params: any[]): Promise<[any[], FieldPacket[]]> => {\n      return new Promise((resolve, reject) => {\n        connection.query(sql, params, (err, result, fields) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve([result as any[], fields]);\n          }\n        });\n      });\n    },\n\n    cursor: async function* (_sql: string, _params: any[]): AsyncIterable<any> {\n      const stream = connection.query(_sql, _params);\n\n      const s = new ReadableStream({\n        start(controller) {\n          let error = false;\n          stream.on('result', (chunk) => {\n            controller.enqueue(chunk);\n          });\n          stream.on('end', () => {\n            if (!error) controller.close();\n          });\n          stream.on('error', (err) => {\n            error = true;\n            controller.error(err);\n          });\n        },\n      });\n\n      for await (const row of s) {\n        yield row;\n      }\n    },\n  };\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}