{"mappings":";;;;;;AAGO,SAAS,0CAAa,MAAgB;IAC3C,OAAO;QACL,mBAAkB,MAAW,EAAE,WAAmB;YAChD,OAAO,CAAC,CAAC,CAAC;QACZ;QAEA,kBAAiB,UAAkB;YACjC,OAAO,MAAM,WAAW,OAAO,CAAC,MAAM,QAAQ;QAChD;QAEA,OAAO,OAAO,KAAa;YACzB,MAAM,MAAa,MAAM,IAAI,QAAQ,CAAC,SAAS;gBAC7C,OAAO,GAAG,CAAC,KAAK,QAAQ,CAAC,KAAK;oBAC5B,IAAI,KACF,OAAO;yBAEP,QAAQ;gBAEZ;YACF;YACA,OAAO;gBAAC;gBAAK;aAAU;QACzB;QAEA,QAAQ,SAAU,GAAW,EAAE,MAAa;YAC1C,IAAI,UAAU;YACd,IAAI;YACJ,IAAI;YACJ,MAAM,QAAQ,EAAE;YAChB,OAAO;gBACL,CAAC,OAAO,aAAa,CAAC,EAAE,IAAO,CAAA;wBAC7B,MAAM;4BACJ,IAAI,CAAC,SAAS;gCACZ,OAAO,IAAI,CACT,KACA,QACA,CAAC,KAAK;oCACJ,oGAAoG;oCACpG,qBAAqB;oCACrB,IAAI,KACF,SAAU;yCACL;wCACL,MAAM,IAAI,CAAC;wCACX,SAAU;oCACZ;gCACF,GACA,CAAC;oCACC,IAAI,KAAK,SAAU;yCACd;wCACH,MAAM,IAAI,CAAC;wCACX,SAAU;oCACZ;oCACA,WAAW;oCACX,WAAW;gCACb;gCAEF,UAAU;4BACZ;4BAEA,IAAI,CAAC,MAAM,MAAM,EACf,MAAM,IAAI,QAAQ,CAAC,SAAS;gCAC1B,WAAW;gCACX,WAAW;4BACb;4BAGF,IAAI,MAAM,MAAM,GAAG,GAAG;gCACpB,MAAM,MAAM,MAAM,KAAK;gCACvB,IAAI,QAAQ,WAAW,OAAO;oCAAE,MAAM;oCAAO,OAAO;gCAAI;4BAC1D;4BAEA,OAAO;gCAAE,MAAM;gCAAM,OAAO;4BAAU;wBACxC;oBACF,CAAA;YACF;QACF;IACF;AACF","sources":["drivers/sqlite/sqlite.ts"],"sourcesContent":["import { type SqlTemplateDriver } from '@sqltags/core';\nimport { type Database } from 'sqlite3';\n\nexport function sqliteDriver(client: Database): SqlTemplateDriver<undefined> {\n  return {\n    parameterizeValue(_value: any, _paramIndex: number) {\n      return `?`;\n    },\n\n    escapeIdentifier(identifier: string) {\n      return '\"' + identifier.replace(/\"/g, '\"\"') + '\"';\n    },\n\n    query: async (sql: string, params: any[]): Promise<[any[], undefined]> => {\n      const res: any[] = await new Promise((resolve, reject) => {\n        client.all(sql, params, (err, rows: any[]) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n      return [res, undefined];\n    },\n\n    cursor: function (sql: string, params: any[]): AsyncIterable<any> {\n      let started = false;\n      let resolver: ((value: any) => void) | undefined;\n      let rejecter: ((value: any) => void) | undefined;\n      const queue = [] as any[];\n      return {\n        [Symbol.asyncIterator]: () => ({\n          next: async () => {\n            if (!started) {\n              client.each(\n                sql,\n                params,\n                (err, row) => {\n                  // There is no case I could find where this would be called with an error, but the docs say it might\n                  // istanbul ignore if\n                  if (err) {\n                    rejecter!(err);\n                  } else {\n                    queue.push(row);\n                    resolver!(row);\n                  }\n                },\n                (err) => {\n                  if (err) rejecter!(err);\n                  else {\n                    queue.push(undefined);\n                    resolver!(undefined);\n                  }\n                  rejecter = undefined;\n                  resolver = undefined;\n                },\n              );\n              started = true;\n            }\n\n            if (!queue.length) {\n              await new Promise((resolve, reject) => {\n                resolver = resolve;\n                rejecter = reject;\n              });\n            }\n\n            if (queue.length > 0) {\n              const row = queue.shift();\n              if (row !== undefined) return { done: false, value: row };\n            }\n\n            return { done: true, value: undefined };\n          },\n        }),\n      };\n    },\n  };\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../../../"}