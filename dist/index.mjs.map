{"mappings":"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","sources":["src/index.ts","src/SqlTag.ts","src/SqlQuery.ts","src/util.ts","src/drivers/mysql.ts","src/drivers/postgres.ts","src/drivers/sqlite.ts"],"sourcesContent":["export { SqlTag } from './SqlTag';\nexport { defaultSerializeValue } from './util';\nexport { type SqlTemplateDriver } from './SqlTemplateDriver';\nexport { type SqlQuery, type SqlExpression } from './SqlQuery';\nexport { mysqlDriver } from './drivers/mysql';\nexport { pgDriver } from './drivers/postgres';\nexport { sqliteDriver } from './drivers/sqlite';\n","import { SqlQuery, type SqlExpression } from './SqlQuery';\nimport { type SqlTemplateDriver } from './SqlTemplateDriver';\nimport { Callable } from './util';\n\nexport class SqlTag<TQueryInfo> {\n  constructor(public driver: SqlTemplateDriver<TQueryInfo>) {\n    return Callable(this);\n  }\n\n  [Callable.call]<T>(strings: TemplateStringsArray, ...values: any[]) {\n    return new SqlQuery<T, TQueryInfo>(this.driver, [...strings], values);\n  }\n\n  join(values: any[], joinWith = ', '): SqlExpression {\n    const filteredValues = values.filter((value) => value !== undefined);\n    return new SqlQuery(\n      this.driver,\n      ['', ...Array(filteredValues.length - 1).fill(joinWith), ''],\n      filteredValues,\n    );\n  }\n\n  id(identifier: string): SqlExpression {\n    return new SqlQuery(this.driver, [this.driver.escapeIdentifier(identifier)], []);\n  }\n\n  and(...values: any[]): SqlExpression {\n    return this`(${this.join(values, ' AND ')})` as SqlExpression;\n  }\n\n  or(...values: any[]): SqlExpression {\n    return this`(${this.join(values, ' OR ')})` as SqlExpression;\n  }\n\n  in(column: string, values: any[], ifEmpty: any = 0): SqlExpression {\n    const filteredValues = values.filter((value) => value !== undefined);\n    if (!filteredValues.length) return this`${ifEmpty}` as SqlExpression;\n    return this`${this.id(column)} IN (${this.join(filteredValues)})` as SqlExpression;\n  }\n\n  setValues(values: any, ...pickKeys: string[]): SqlExpression {\n    const keys = pickKeys.length ? pickKeys : Object.keys(values);\n    const expressions = keys.map((key) => {\n      return this`${this.id(key)} = ${values[key]}`;\n    });\n    return this.join(expressions, ', ');\n  }\n\n  insertValues(values: any, ...pickKeys: string[]): SqlExpression {\n    const keys = pickKeys.length\n      ? pickKeys\n      : Object.keys(Array.isArray(values) ? values[0] : values);\n    const columns = this.join(\n      keys.map((key) => this.id(key)),\n      ', ',\n    );\n    let rows: SqlExpression;\n    if (Array.isArray(values)) {\n      rows = this.join(\n        values.map((row) => {\n          const values = this.join(keys.map((key) => row[key]));\n          return this`(${values})`;\n        }),\n        ', ',\n      );\n    } else {\n      const row = this.join(keys.map((key) => values[key]));\n      rows = this`(${row})` as SqlExpression;\n    }\n    return this`(${columns}) VALUES ${rows}` as SqlExpression;\n  }\n\n  compile(strings: TemplateStringsArray, ...values: any[]) {\n    return new SqlQuery(this.driver, [...strings], values).compile();\n  }\n}\n\n/**\n * Extended definition for the template tag function.\n */\nexport interface SqlTag<TQueryInfo> {\n  <T>(strings: TemplateStringsArray, ...values: any[]): SqlQuery<T, TQueryInfo>;\n}\n","import { defaultSerializeValue } from './util';\nimport { type SqlTemplateDriver } from './SqlTemplateDriver';\n\nexport type SqlExpression = SqlQuery<never, never>;\n\nexport type SqlQueryResult<TResult, TQueryInfo> = [TResult[], TQueryInfo, string, any[]];\n\nexport class SqlQuery<TResult, TQueryInfo> extends Promise<SqlQueryResult<TResult, TQueryInfo>> {\n  constructor(\n    private config: SqlTemplateDriver<any>,\n    private templateStrings: string[],\n    private values: any[],\n  ) {\n    super((resolve) => resolve(null!));\n  }\n\n  then<TResult1 = SqlQueryResult<TResult, TQueryInfo>, TResult2 = never>(\n    onfulfilled?:\n      | ((value: SqlQueryResult<TResult, TQueryInfo>) => TResult1 | PromiseLike<TResult1>)\n      | undefined\n      | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n  ): Promise<TResult1 | TResult2> {\n    const [text, params] = this.compile();\n    return this.config.query(text, params).then(([rows, queryInfo]) => {\n      return onfulfilled!([rows, queryInfo, text, params]);\n    }, onrejected);\n  }\n\n  compile(params?: any[]): [string, any[]] {\n    if (!params) params = [];\n    let sql = '';\n\n    for (let i = 0; i < this.templateStrings.length; i++) {\n      sql += this.templateStrings[i];\n      const value = this.values[i];\n\n      if (value === undefined) continue;\n\n      if (value instanceof SqlQuery) {\n        const [subSql] = value.compile(params);\n        sql += subSql;\n      } else {\n        const serializedValue = this.config.serializeValue\n          ? this.config.serializeValue(value)\n          : defaultSerializeValue(value);\n        sql += this.config.parameterizeValue(serializedValue, params.length);\n        params.push(serializedValue);\n      }\n    }\n\n    return [sql, params];\n  }\n\n  cursor(): AsyncIterable<TResult> {\n    const [sql, params] = this.compile();\n    return this.config.cursor(sql, params);\n  }\n}\n","export function defaultSerializeValue(value: unknown) {\n  if (value instanceof Date) return value.toISOString();\n  if (Array.isArray(value) || typeof value === 'object') return JSON.stringify(value);\n  return value;\n}\n\nexport function Callable(obj: any) {\n  return Object.assign(\n    Object.setPrototypeOf(function callable(...args: any[]) {\n      return obj[Callable.call](...args);\n    }, obj.constructor.prototype),\n    obj,\n  );\n}\n\nCallable.call = Symbol('_call');\n","import { ReadableStream } from 'stream/web';\nimport { type Connection, type FieldPacket, type PoolConnection } from 'mysql2';\nimport { type SqlTemplateDriver } from '../SqlTemplateDriver';\n\nexport function mysqlDriver(\n  connection: Connection | PoolConnection,\n): SqlTemplateDriver<FieldPacket[]> {\n  return {\n    parameterizeValue(_value: any, _paramIndex: number) {\n      return '?';\n    },\n\n    escapeIdentifier(identifier: string) {\n      return `\\`${identifier.replace(/`/g, '``')}\\``;\n    },\n\n    query: async (sql: string, params: any[]): Promise<[any[], FieldPacket[]]> => {\n      return new Promise((resolve, reject) => {\n        connection.query(sql, params, (err, result, fields) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve([result as any[], fields]);\n          }\n        });\n      });\n    },\n\n    cursor: async function* (_sql: string, _params: any[]): AsyncIterable<any> {\n      const stream = connection.query(_sql, _params);\n\n      const s = new ReadableStream({\n        start(controller) {\n          let error = false;\n          stream.on('result', (chunk) => {\n            controller.enqueue(chunk);\n          });\n          stream.on('end', () => {\n            if (!error) controller.close();\n          });\n          stream.on('error', (err) => {\n            error = true;\n            controller.error(err);\n          });\n        },\n      });\n\n      for await (const row of s) {\n        yield row;\n      }\n    },\n  };\n}\n","import { type SqlTemplateDriver } from '../SqlTemplateDriver';\nimport { type Client, type Pool, type PoolClient, type QueryResult } from 'pg';\n// import Cursor from 'pg-cursor';\n\ntype Cursor<T> = any;\ndeclare const Cursor: Cursor<any>;\n\nfunction isPool(client: Client | Pool): client is Pool {\n  return 'idleCount' in client;\n}\n\nexport function pgDriver(client: Client | Pool): SqlTemplateDriver<QueryResult> {\n  return {\n    parameterizeValue(_value: any, _paramIndex: number) {\n      return `$${_paramIndex + 1}`;\n    },\n\n    escapeIdentifier(identifier: string) {\n      // Not using the one from 'pg' library because it requires a connection instance which doens't work with the pool\n      // Ported from PostgreSQL 9.2.4 source code in src/interfaces/libpq/fe-exec.c\n      return '\"' + identifier.replace(/\"/g, '\"\"') + '\"';\n    },\n\n    // Note that values are not serialized using the default sqltags serialization.\n    // Instead, they are passed as-is and serialized according to this:\n    // https://node-postgres.com/features/queries#parameterized-query\n    serializeValue: (value) => value,\n\n    query: async (sql: string, params: any[]): Promise<[any[], QueryResult]> => {\n      // const _client = isPool(client) ? await client.connect() : client;\n      const res = await client.query(sql, params);\n      // if (isPool(client)) (_client as PoolClient).release();\n      return [res.rows, res];\n    },\n\n    cursor: function (sql: string, params: any[]): AsyncIterable<any> {\n      let _client: Client | PoolClient;\n      let cursor: Cursor<any>;\n      const queue: any[] = [];\n\n      return {\n        [Symbol.asyncIterator]: () => ({\n          next: async () => {\n            if (!_client) {\n              _client = isPool(client) ? await client.connect() : client;\n              cursor = _client.query(new Cursor(sql, params));\n            }\n\n            if (queue.length > 0) {\n              return { done: false, value: queue.shift() };\n            }\n\n            try {\n              const res = await cursor.read(100);\n              if (res.length === 0) {\n                await cursor.close();\n                if (isPool(client)) (_client as PoolClient).release();\n                return { done: true, value: undefined };\n              }\n\n              queue.push(...res);\n              return { done: false, value: queue.shift() };\n            } catch(err: any) {\n              await cursor.close();\n              if (isPool(client)) (_client as PoolClient).release();\n              throw err;\n            }\n          },\n        }),\n      };\n    },\n  };\n}\n","import { type SqlTemplateDriver } from '../SqlTemplateDriver';\nimport { type Database } from 'sqlite3';\n\nexport function sqliteDriver(client: Database): SqlTemplateDriver<undefined> {\n  return {\n    parameterizeValue(_value: any, _paramIndex: number) {\n      return `?`;\n    },\n\n    escapeIdentifier(identifier: string) {\n      return '\"' + identifier.replace(/\"/g, '\"\"') + '\"';\n    },\n\n    query: async (sql: string, params: any[]): Promise<[any[], undefined]> => {\n      const res: any[] = await new Promise((resolve, reject) => {\n        client.all(sql, params, (err, rows: any[]) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(rows);\n          }\n        });\n      });\n      return [res, undefined];\n    },\n\n    cursor: function (sql: string, params: any[]): AsyncIterable<any> {\n      let started = false;\n      let resolver: ((value: any) => void) | undefined;\n      let rejecter: ((value: any) => void) | undefined;\n      const queue = [] as any[];\n      return {\n        [Symbol.asyncIterator]: () => ({\n          next: async () => {\n            if (!started) {\n              client.each(\n                sql,\n                params,\n                (err, row) => {\n                  // There is no case I could find where this would be called with an error, but the docs say it might\n                  // istanbul ignore if\n                  if (err) {\n                    rejecter!(err);\n                  } else {\n                    queue.push(row);\n                    resolver!(row);\n                  }\n                },\n                (err) => {\n                  if (err) rejecter!(err);\n                  else {\n                    queue.push(undefined);\n                    resolver!(undefined);\n                  }\n                  rejecter = undefined;\n                  resolver = undefined;\n                },\n              );\n              started = true;\n            }\n\n            if (!queue.length) {\n              await new Promise((resolve, reject) => {\n                resolver = resolve;\n                rejecter = reject;\n              });\n            }\n\n            if (queue.length > 0) {\n              const row = queue.shift();\n              if (row !== undefined) return { done: false, value: row };\n            }\n\n            return { done: true, value: undefined };\n          },\n        }),\n      };\n    },\n  };\n}\n"],"names":[],"version":3,"file":"index.mjs.map","sourceRoot":"../"}